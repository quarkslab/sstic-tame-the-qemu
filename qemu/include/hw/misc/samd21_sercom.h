/*
 * nRF51 SoC UART emulation
 *
 * Copyright (c) 2018 Julia Suvorova <jusual@mail.ru>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 or
 * (at your option) any later version.
 */

#ifndef SAMD21_SERCOM_H
#define SAMD21_SERCOM_H

#include "hw/sysbus.h"
#include "hw/ssi/ssi.h"
#include "chardev/char-fe.h"
#include "hw/registerfields.h"
#include "qom/object.h"

#define UART_FIFO_LENGTH 16
#define SERCOM_SIZE 0x34

#define TYPE_SAMD21_SERCOM "samd21.sercom"
OBJECT_DECLARE_SIMPLE_TYPE(SAMD21SERCOMState, SAMD21_SERCOM)

REG32(USART_CTRLA, 0x00)
    FIELD(USART_CTRLA, SWRST, 0, 1)
    FIELD(USART_CTRLA, ENABLE, 1, 1)
    FIELD(USART_CTRLA, MODE, 2, 3)
    FIELD(USART_CTRLA, RUNSTDBY, 7, 1)
    FIELD(USART_CTRLA, IBON, 8, 1)
    FIELD(USART_CTRLA, SAMPR, 13, 3)
    FIELD(USART_CTRLA, TXPO, 16, 2)
    FIELD(USART_CTRLA, RXPO, 20, 2)
    FIELD(USART_CTRLA, SAMPA, 22, 2)
    FIELD(USART_CTRLA, FORM, 24, 4)
    FIELD(USART_CTRLA, CMODE, 28, 1)
    FIELD(USART_CTRLA, CPOL, 29, 1)
    FIELD(USART_CTRLA, DORD, 30, 1)

REG32(USART_CTRLB, 0x04)
    FIELD(USART_CTRLB, CHSIZE, 0, 3)
    FIELD(USART_CTRLB, SBMODE, 6, 1)
    FIELD(USART_CTRLB, COLDEN, 8, 1)
    FIELD(USART_CTRLB, SFDE, 9, 1)
    FIELD(USART_CTRLB, ENC, 10, 1)
    FIELD(USART_CTRLB, PMODE, 13, 1)
    FIELD(USART_CTRLB, TXEN, 16, 1)
    FIELD(USART_CTRLB, RXEN, 17, 1)

REG32(SPI_CTRLA, 0x00)
    FIELD(SPI_CTRLA, SWRST, 0, 1)
    FIELD(SPI_CTRLA, ENABLE, 1, 1)
    FIELD(SPI_CTRLA, MODE, 2, 3)
    FIELD(SPI_CTRLA, RUNSTDBY, 7, 1)
    FIELD(SPI_CTRLA, IBON, 8, 1)
    FIELD(SPI_CTRLA, DOPO, 16, 2)
    FIELD(SPI_CTRLA, DIPO, 20, 2)
    FIELD(SPI_CTRLA, FORM, 24, 4)
    FIELD(SPI_CTRLA, CPHA, 28, 1)
    FIELD(SPI_CTRLA, CPOL, 29, 1)
    FIELD(SPI_CTRLA, DORD, 30, 1)

REG32(SPI_CTRLB, 0x04)
    FIELD(SPI_CTRLB, CHSIZE, 0, 3)
    FIELD(SPI_CTRLB, PLOADEN, 6, 1)
    FIELD(SPI_CTRLB, SSDE, 9, 1)
    FIELD(SPI_CTRLB, MSSEN, 13, 1)
    FIELD(SPI_CTRLB, AMODE, 14, 2)
    FIELD(SPI_CTRLB, RXEN, 17, 1)

REG16(USART_BAUD, 0x0C)
REG8(USART_RXPL, 0x0E)
REG8(USART_INTENCLR, 0x14)
    FIELD(USART_INTENCLR, DRE, 0, 1)
    FIELD(USART_INTENCLR, TXC, 1, 1)
    FIELD(USART_INTENCLR, RXC, 2, 1)
    FIELD(USART_INTENCLR, RXS, 3, 1)
    FIELD(USART_INTENCLR, CTSIC, 4, 1)
    FIELD(USART_INTENCLR, RXBRK, 5, 1)
    FIELD(USART_INTENCLR, ERROR, 7, 1)

REG8(USART_INTENSET, 0x16)
    FIELD(USART_INTENSET, DRE, 0, 1)
    FIELD(USART_INTENSET, TXC, 1, 1)
    FIELD(USART_INTENSET, RXC, 2, 1)
    FIELD(USART_INTENSET, RXS, 3, 1)
    FIELD(USART_INTENSET, CTSIC, 4, 1)
    FIELD(USART_INTENSET, RXBRK, 5, 1)
    FIELD(USART_INTENSET, ERROR, 7, 1)

REG8(USART_INTFLAG, 0x18)
    FIELD(USART_INTFLAG, DRE, 0, 1)
    FIELD(USART_INTFLAG, TXC, 1, 1)
    FIELD(USART_INTFLAG, RXC, 2, 1)
    FIELD(USART_INTFLAG, RXS, 3, 1)
    FIELD(USART_INTFLAG, CTSIC, 4, 1)
    FIELD(USART_INTFLAG, RXBRK, 5, 1)
    FIELD(USART_INTFLAG, ERROR, 7, 1)

REG8(SPI_INTENCLR, 0x14)
    FIELD(SPI_INTENCLR, DRE, 0, 1)
    FIELD(SPI_INTENCLR, TXC, 1, 1)
    FIELD(SPI_INTENCLR, RXC, 2, 1)
    FIELD(SPI_INTENCLR, SSL, 3, 1)
    FIELD(SPI_INTENCLR, ERROR, 7, 1)

REG8(SPI_INTENSET, 0x16)
    FIELD(SPI_INTENSET, DRE, 0, 1)
    FIELD(SPI_INTENSET, TXC, 1, 1)
    FIELD(SPI_INTENSET, RXC, 2, 1)
    FIELD(SPI_INTENSET, SSL, 3, 1)
    FIELD(SPI_INTENSET, ERROR, 7, 1)

REG8(SPI_INTFLAG, 0x18)
    FIELD(SPI_INTFLAG, DRE, 0, 1)
    FIELD(SPI_INTFLAG, TXC, 1, 1)
    FIELD(SPI_INTFLAG, RXC, 2, 1)
    FIELD(SPI_INTFLAG, SSL, 3, 1)
    FIELD(SPI_INTFLAG, ERROR, 7, 1)

REG16(SERCOM_STATUS, 0x1A)
    FIELD(SERCOM_STATUS, PERR, 0, 1)
    FIELD(SERCOM_STATUS, FERR, 1, 1)
    FIELD(SERCOM_STATUS, BUFOVF, 2, 1)
    FIELD(SERCOM_STATUS, CTS, 3, 1)
    FIELD(SERCOM_STATUS, ISF, 4, 1)
    FIELD(SERCOM_STATUS, COLL, 5, 1)
    FIELD(SERCOM_STATUS, TXE, 6, 1)

REG32(SERCOM_SYNCBUSY, 0x1C)
    FIELD(SERCOM_SYNCBUSY, SWST, 0, 1)
    FIELD(SERCOM_SYNCBUSY, ENABLE, 1, 1)
    FIELD(SERCOM_SYNCBUSY, CTRLB, 2, 1)

REG16(SERCOM_DATA, 0x28)
REG8(SERCOM_DBGCTRL, 0x30)
    FIELD(SERCOM_DBGCTRL, DBGSTOP, 0, 1)

enum {
    SERCOM_UNSUPPORTED,
    SERCOM_USART,
    SERCOM_SPI
};

struct SAMD21SERCOMState {
    SysBusDevice parent_obj;

    MemoryRegion iomem;
    CharBackend chr;
    SSIBus *ssi;
    qemu_irq irq;
    guint watch_tag;

    uint8_t rx_fifo[UART_FIFO_LENGTH];
    unsigned int rx_fifo_pos;
    unsigned int rx_fifo_len;

    uint32_t reg[SERCOM_SIZE / 4];
    uint16_t *reg16;
    uint8_t *reg8;
    uint8_t interrupts;

    int current_mode;
    bool tx_enabled;
    bool rx_enabled;
    bool pending_tx_byte;
    bool enabled;
};

#endif
